cmake_minimum_required(VERSION 3.10)

# set the project name
project(test LANGUAGES C ASM)
set(CMAKE_SYSTEM_PROCESSOR "rv32imac")

# Set your SDK ROOT here
set(WCH_SDK_ROOT "../../ch573-sdk") 
set(WCH_DRIVER_ROOT "${WCH_SDK_ROOT}/StdPeriphDriver")
get_filename_component(LINKER_SCRIPT "${WCH_SDK_ROOT}/ld/Link.ld" REALPATH)

# specify the C++ standard
set(CMAKE_C_FLAGS "-Os -g -Wall -ffunction-sections")
set(TARGET main)

# add the executable
add_executable(${TARGET}.elf 
    ${TARGET}.c
    ${WCH_DRIVER_ROOT}/CH57x_gpio.c
    ${WCH_DRIVER_ROOT}/CH57x_sys.c
    ${WCH_SDK_ROOT}/RVMSIS/core_riscv.c
    ${WCH_SDK_ROOT}/Startup/startup_CH573.S
) 

target_include_directories(${TARGET}.elf PRIVATE 
    ../include/
    ${WCH_DRIVER_ROOT}/inc
    ${WCH_SDK_ROOT}/RVMSIS
)

target_link_options(${TARGET}.elf PRIVATE 
    "--specs=nosys.specs"
    "--specs=nano.specs"
    "-nostartfiles"
    "-fno-exceptions"
    "-Xlinker"
    "-T" "${LINKER_SCRIPT}"
    "-Wl,-Map=${TARGET}.map"
    "-Wl,--print-memory-usage"
)

# Post processing command to create a hex file 
add_custom_command(TARGET ${TARGET}.elf POST_BUILD
        COMMAND ${CMAKE_OBJCOPY} -O ihex  ${TARGET}.elf  ${TARGET}.hex
        COMMENT "Invoking: Hexdump")

add_custom_command(TARGET ${TARGET}.elf POST_BUILD
        COMMAND ${CROSS_COMPILE}size ${TARGET}.elf
        COMMENT "Invoking: filesize")
